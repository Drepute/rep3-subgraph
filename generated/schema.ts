// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Dao extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("NFTHashes", Value.fromBytesArray(new Array(0)));
    this.set("totalSupply", Value.fromI32(0));
    this.set("approver", Value.fromBytesArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dao entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Dao must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dao", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Dao | null {
    return changetype<Dao | null>(store.get("Dao", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get NFTHashes(): Array<Bytes> {
    let value = this.get("NFTHashes");
    return value!.toBytesArray();
  }

  set NFTHashes(value: Array<Bytes>) {
    this.set("NFTHashes", Value.fromBytesArray(value));
  }

  get membershipNFT(): Array<string> {
    let value = this.get("membershipNFT");
    return value!.toStringArray();
  }

  set membershipNFT(value: Array<string>) {
    this.set("membershipNFT", Value.fromStringArray(value));
  }

  get totalSupply(): i32 {
    let value = this.get("totalSupply");
    return value!.toI32();
  }

  set totalSupply(value: i32) {
    this.set("totalSupply", Value.fromI32(value));
  }

  get associationBadge(): Array<string> {
    let value = this.get("associationBadge");
    return value!.toStringArray();
  }

  set associationBadge(value: Array<string>) {
    this.set("associationBadge", Value.fromStringArray(value));
  }

  get approver(): Array<Bytes> {
    let value = this.get("approver");
    return value!.toBytesArray();
  }

  set approver(value: Array<Bytes>) {
    this.set("approver", Value.fromBytesArray(value));
  }
}

export class Approver extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("dao", Value.fromBytesArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Approver must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approver", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Approver | null {
    return changetype<Approver | null>(store.get("Approver", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get dao(): Array<Bytes> {
    let value = this.get("dao");
    return value!.toBytesArray();
  }

  set dao(value: Array<Bytes>) {
    this.set("dao", Value.fromBytesArray(value));
  }
}

export class MembershipNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("contractAddress", Value.fromBytes(Bytes.empty()));
    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("claimer", Value.fromBytes(Bytes.empty()));
    this.set("metadataUri", Value.fromString(""));
    this.set("level", Value.fromString(""));
    this.set("category", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MembershipNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MembershipNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MembershipNFT", id.toString(), this);
    }
  }

  static load(id: string): MembershipNFT | null {
    return changetype<MembershipNFT | null>(store.get("MembershipNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (!value) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get claimer(): Bytes {
    let value = this.get("claimer");
    return value!.toBytes();
  }

  set claimer(value: Bytes) {
    this.set("claimer", Value.fromBytes(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    return value!.toString();
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get level(): string {
    let value = this.get("level");
    return value!.toString();
  }

  set level(value: string) {
    this.set("level", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }
}

export class AssociationBadge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("contractAddress", Value.fromBytes(Bytes.empty()));
    this.set("membershipId", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromI32(0));
    this.set("metadatUri", Value.fromString(""));
    this.set("claimer", Value.fromBytes(Bytes.empty()));
    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("data", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssociationBadge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AssociationBadge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssociationBadge", id.toString(), this);
    }
  }

  static load(id: string): AssociationBadge | null {
    return changetype<AssociationBadge | null>(
      store.get("AssociationBadge", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get membershipId(): BigInt {
    let value = this.get("membershipId");
    return value!.toBigInt();
  }

  set membershipId(value: BigInt) {
    this.set("membershipId", Value.fromBigInt(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value!.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get metadatUri(): string {
    let value = this.get("metadatUri");
    return value!.toString();
  }

  set metadatUri(value: string) {
    this.set("metadatUri", Value.fromString(value));
  }

  get claimer(): Bytes {
    let value = this.get("claimer");
    return value!.toBytes();
  }

  set claimer(value: Bytes) {
    this.set("claimer", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get data(): BigInt {
    let value = this.get("data");
    return value!.toBigInt();
  }

  set data(value: BigInt) {
    this.set("data", Value.fromBigInt(value));
  }
}
